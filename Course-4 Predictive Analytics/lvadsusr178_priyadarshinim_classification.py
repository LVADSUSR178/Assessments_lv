# -*- coding: utf-8 -*-
"""LVADSUSR178_PriyadarshiniM_Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fuKSEAUkD3hlIbtZGdm4N4p8C5DJIPpE
"""

import numpy as np
import pandas as pd

d=pd.read_csv('/content/penguins_classification.csv')

d.head()

#EDA
import matplotlib.pyplot as plt
import seaborn as sns

#barplot
for column in d.select_dtypes(include='object'):
  plt.figure(figsize=(10, 8))
  sns.barplot(d[column])
  plt.title(f"Bar plots")

#histograms
for column in d.select_dtypes(include=['int64','float64']):
  plt.figure(figsize=(10, 8))
  sns.barplot(d[column])
  plt.title(f"Histograms")

#Data cleaning
d.isnull().sum()

#Filling null values
d['bill_depth_mm']=d['bill_depth_mm'].fillna(d['bill_depth_mm'].mean())

d.isnull().sum()

d.duplicated().sum()
#no duplicate values are found

#Removing outliers
Q1 = d.quantile(0.25)
Q3 = d.quantile(0.75)
IQR = Q3 - Q1
data = d[~((d < (Q1 - 1.5 * IQR)) | (d > (Q3 + 1.5 * IQR))).any(axis=1)]

# d = pd.get_dummies(d, columns=['species'],dtype=int)
# d = pd.get_dummies(d, columns=['species'],dtype=int)

d.drop(columns=['island'], inplace=True)

d.info()

#Feature selection
x=d.drop(columns=['species'], axis=1)
y=d['species']

#Splitting of datasets
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test= train_test_split(x,y, test_size=0.3, random_state=10)

#Scaling data
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()

x_train=pd.DataFrame(scaler.fit_transform(x_train[list(x.columns)]),
                                    columns=x.columns)
x_test=pd.DataFrame(scaler.transform(x_test[list(x.columns)]),
                                    columns=x.columns)

#model building
from sklearn.ensemble import RandomForestClassifier
model=RandomForestClassifier(n_estimators=100, random_state=10)
model.fit(x_train, y_train)
pred=model.predict(x_test)
print(pred)

#model evaluation
from sklearn.metrics import accuracy_score, precision_score, f1_score, recall_score, classification_report
ac=accuracy_score(pred, y_test)
print(f"Accuracy score is:\n {ac}")
# ps=precision_score(pred, y_test)
# print(f"Precision score is:\n {ac}")
# fs=f1_score(pred, y_test)
# print(f"F1_score is:\n {ac}")
# rs=recall_score(pred, y_test)
# print(f"Recall score is:\n {ac}")
cr=classification_report(pred, y_test)
print(f"Classification report:\n {cr}")