# -*- coding: utf-8 -*-
"""LVADSUSR178_PriyadarshiniM_reg.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1688BAjmM4mDv88VI8RPjgA1bf0YlLWgF
"""

import numpy as np
import pandas as pd

d=pd.read_csv('/content/booking.csv')

d.head()

d.info()

#2.5 Tasks
#Handling missing values and outliers
d.isnull().sum()

d['room type']=d['room type'].fillna(d['room type'].mode())
d['average price']=d['average price'].fillna(d['average price'].mean())

d.isnull().sum()

import matplotlib.pyplot as plt
import seaborn as sns
plt.figure(figsize=(15,7))
sns.scatterplot(data=d, marker='o')
plt.title("Outliers in Expenses data")
plt.show()

#2.encoding categorical values
from sklearn.preprocessing import LabelEncoder
len=LabelEncoder()
d['Booking_ID']=len.fit_transform(d['Booking_ID'])
d['type of meal']=len.fit_transform(d['type of meal'])
d['room type']=len.fit_transform(d['room type'])
d['market segment type']=len.fit_transform(d['market segment type'])
d['date of reservation']=len.fit_transform(d['date of reservation'])
d['booking status']=len.fit_transform(d['booking status'])

d.info()

#3. feature selection and data cleaning
d.duplicated().sum()
# d.drop_duplicates(inplace=True)

x=d.drop(columns=['booking status'])
y=d['booking status']

#4. data splitting
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

x_train, x_test, y_train, y_test=train_test_split(x,y, test_size=0.3, random_state=10)

from sklearn.preprocessing import MinMaxScaler,StandardScaler
scaler = MinMaxScaler()

x_train=pd.DataFrame(scaler.fit_transform(x_train[list(x.columns)]),
                                    columns=x.columns)
x_test=pd.DataFrame(scaler.transform(x_test[list(x.columns)]),
                                    columns=x.columns)

#5. model development and training
model=LogisticRegression()
model.fit(x_train, y_train)
pred=model.predict(x_test)
# print(pred)

#6.Model evaluation
from sklearn.metrics import precision_score, accuracy_score, recall_score, f1_score, classification_report, confusion_matrix
ps=precision_score(pred, y_test)
ac=accuracy_score(pred, y_test)
re=recall_score(pred, y_test)
fs=f1_score(pred, y_test)
cr=classification_report(pred, y_test)
cm=confusion_matrix(pred, y_test)
print(f"Precision score:\n {ps}")
print(f"Accuracy score:\n {ac}")
print(f"Recall score:\n {re}")
print(f"F1-score:\n {fs}")
print(f"Classification report:\n {cr}")
print(f"Confusion matrix:\n {cm}")

#2.6 Expected outcome
#In the given scenario, logistic regression is used to build the model which predicts the booking status
#for a particular hotel. "booking status" is considered as the dependent variable and others are taken
#to be independent variables. For this model the accuracy score is 79% which indicates that the relation
#between the dependent and independent variables is highly correlated.